version: '3.8'

services:
  frontend:
    build:
      context: ../../frontend_web  # Se asegura de que el contexto sea la raíz de frontend_web
      dockerfile: docker/Dockerfile  # Ubicación específica del Dockerfile del frontend
    container_name: react_vite_app
    ports:
      - "5173:5173"  # Expone el puerto de Vite
    volumes:
      - ../../frontend_web:/app  # Monteamos solo la carpeta correcta
      - /app/node_modules  # Evita sobrescribir node_modules con el volumen
    environment:
      - NODE_ENV=development
    command: ["npm", "run", "dev", "--", "--host"]
    networks:
      - app_network

  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: backend_server
    restart: always
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_USER=my_user
      - DB_PASSWORD=my_password
      - DB_NAME=my_database
      - DB_PORT=5432
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network

  postgres:
    image: postgres:14
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: my_user
      POSTGRES_PASSWORD: my_password
      POSTGRES_DB: my_database
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "my_user", "-d", "my_database" ]
      interval: 10s
      retries: 5
      timeout: 5s

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    networks:
      - app_network

networks:
  app_network:
    driver: bridge
volumes:
  postgres_data: